from requests import get
from os.path import exists
from os import mkdir
from modules.color import print_colored, colors, bcolors
from modules.outfile import WriteToFile

printed_software = []

def GetDownloadLink(CVEID, SoftwareName=None):
    apiresponse = get(
        "https://www.exploit-db.com/search?cve=" + CVEID, 
        headers={
            "X-Requested-With": "XMLHttpRequest",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36"
        }
    )
    if apiresponse.status_code == 200:
        apidata = apiresponse.json()
        ExploitLinks = []
        for exploit in apidata['data']:
            ExploitLinks.append("https://www.exploit-db.com/download/" + exploit['id'])
        if SoftwareName not in printed_software and len(ExploitLinks) > 0:
            print(" " * 100, end="\r")
            print("\n┌─" + bcolors.yellow + "[ " + SoftwareName + " ]" + bcolors.endc)
            printed_software.append(SoftwareName)
        return ExploitLinks

def GetExploitContents(ExploitLink):
    apiresponse = get(
        ExploitLink, 
        headers={
            "X-Requested-With": "XMLHttpRequest",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36"
        }
    )
    if apiresponse.status_code == 200:
        content = apiresponse.content
        filename = apiresponse.headers['Content-Disposition'].lstrip("attachment; filename=\"")
        
        return content, filename
    else:
        return None, None


def GetExploitAsFile(CVEID, SoftwareName):
    ExploitLinks = GetDownloadLink(CVEID, SoftwareName)

    if len(ExploitLinks) > 0:

        print(" " * 100, end="\r") #clear the line

        print("│\n├─────┤ " + bcolors.red + str(CVEID) + bcolors.endc + "\n│")

        print(" " * 100, end="\r") #clear the line
        print("Downloading exploit for %s (%s)..." % (SoftwareName, CVEID), end="\r")

        if not exists("exploits"):
            mkdir("exploits")

        if not exists("exploits/" + SoftwareName):
            mkdir("exploits/" + SoftwareName)

        if not exists("exploits/" + SoftwareName + "/" + CVEID):
            mkdir("exploits/" + SoftwareName + "/" + CVEID)

        for exploit in ExploitLinks:
            contents, filename = GetExploitContents(exploit)
            if contents == None or filename == None:
                continue
            print_colored("├────────# exploits/" + SoftwareName + "/" + CVEID + "/" + filename + "\n│", colors.bold)
            
            with open("exploits/" + SoftwareName + "/" + CVEID + "/" + filename, "wb") as ExploitFile:
                ExploitFile.write(contents)
                ExploitFile.close()
        print("├" + "─" * 59)
    else:
        print(" " * 100, end="\r")
        print("No exploits found for " + CVEID, end="\r")

def GetExploitsFromArray(ExploitsArray, target=None):
    print_colored("\n" + "-" * 60, colors.blue)
    if target:
        print_colored(("Downloading exploits for %s..." % (target)).center(60), colors.blue)
    else:
        print_colored("Downloading exploits...".center(60), colors.blue)
    print_colored("-" * 60 + "\n", colors.blue)
    WriteToFile("\nDownloading exploits...")

    for exploit in ExploitsArray:
        GetExploitAsFile(exploit[1], exploit[0])
        